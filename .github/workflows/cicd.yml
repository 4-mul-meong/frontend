name: Node.js CI/CD

on:
  push:
    branches: [ develop, release ]
  pull_request:
    types: [ closed ]
    branches: [ develop, release ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # x를 사용하여 해당 범위 내의 최신 버전 설치
        node-version: [ 22.x ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
        if: github.ref == 'refs/heads/release'

      - name: Docker build
        run: |
          docker build -f Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/client-frontend .

      - name: Docker push to production
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/client-frontend
        if: github.ref == 'refs/heads/release'

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get GitHub IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Add GitHub IP to AWS Security Group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} --protocol tcp --port ${{ secrets.EC2_SSH_PORT }} --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Deploy to EC2 using PEM Key
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          timeout: 60s
          script: |
            echo "Stopping existing application..."
            sudo docker stop client-frontend || true
            sudo docker rm client-frontend || true

            echo "Pulling latest image..."
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/client-frontend:latest

            echo "Running new container..."
            sudo docker run -d --name client-frontend -p ${{ secrets.APPLICATION_PORT }}:${{ secrets.APPLICATION_PORT }} ${{ secrets.DOCKERHUB_USERNAME }}/client-frontend:latest

            echo "Cleaning up unused Docker images..."
            sudo docker image prune -f

      - name: Remove GitHub IP from AWS Security Group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} --protocol tcp --port ${{ secrets.EC2_SSH_PORT }} --cidr ${{ steps.ip.outputs.ipv4 }}/32